# Give the application a name so it can register with Eureka
spring.application.name=api-gateway

# This is the main port for your entire backend. All requests from Angular will come here.
server.port=8080
spring.kafka.bootstrap-servers=localhost:9092
# Tell the gateway where to find the Eureka server (the service "phone book")
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
jwt.secret=hh2gS4+0vg3EjQFdJ1pqKsJphfG3zRlLFJUFCIwtV+c=
jwt.expiration=86400000

# Rule for ALL authentication paths (always public)
spring.cloud.gateway.routes[0].id=auth-service-route
spring.cloud.gateway.routes[0].uri=lb://user-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/auth/**

# Rule 2: SECURED User Service endpoints (WITH Authentication filter)
spring.cloud.gateway.routes[1].id=secured-user-service-route
spring.cloud.gateway.routes[1].uri=lb://user-service
# This rule matches all other paths under /api/users/
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/users/**
# Apply the filter only to these secured routes
spring.cloud.gateway.routes[1].filters[0]=Authentication

# Rule 3: SECURED Product Service endpoints
spring.cloud.gateway.routes[2].id=product-service-route
spring.cloud.gateway.routes[2].uri=lb://PRODUCT-SERVICE
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/products/**
spring.cloud.gateway.routes[2].filters[0]=Authentication

# Rule 4: SECURED Media Service endpoints
spring.cloud.gateway.routes[3].id=media-service-route
spring.cloud.gateway.routes[3].uri=lb://MEDIA-SERVICE
spring.cloud.gateway.routes[3].predicates[0]=Path=/api/media/**
spring.cloud.gateway.routes[3].filters[0]=Authentication